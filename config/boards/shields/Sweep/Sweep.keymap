/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_34keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(0,100,3)
#define RGB_SYM RGB_COLOR_HSB(40,100,3)
#define RGB_NAV RGB_COLOR_HSB(130,100,3)
#define RGB_BTF RGB_COLOR_HSB(230,100,4)

&sk {
    quick-release;
};

&sl {
    release-after-ms = <300>;
};

/ {
// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_OFF>
                , <&tog _NAV>
                ;
        };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        to_NAV: to_NAV {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_NAV>
                , <&tog _NAV>
                ;
        };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        mo_BTF: mo_BTF {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_ON>
                , <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_OFF>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };

        You: You {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <5>;
            bindings
                = <&kp LS(Y)>
                , <&kp O>
                , <&kp U>
                ;
        };

    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_BOOT {
            timeout-ms = <50>;
            key-positions = <LMC RMC>;
            bindings = <&to_BOOT>;
            layers = <_BTF>;
        };

        combo_BTF1 {
            timeout-ms = <50>;
            key-positions = <LHI RHI>;
            bindings = <&mo_BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTF2 {
            timeout-ms = <50>;
            key-positions = <LHI LHO>;
            bindings = <&mo_BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTF3 {
            timeout-ms = <50>;
            key-positions = <RHO RHI>;
            bindings = <&mo_BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_BTCLR {
            timeout-ms = <50>;
            key-positions = <LBR LBI>;
            bindings = <&bt BT_CLR>;
            layers = <_BTF>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_NAV>;
            layers = <_BASE _SYM>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_NAV>;
            layers = <_BASE _SYM>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

// ------------------------- VOLUME COMBOS --------------------------------
        // combo_V_UP {
        //     timeout-ms = <40>;
        //     key-positions = <RTC RMC>;
        //     bindings = <&kp C_VOL_UP>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_BASE _SYM>;
        // };

        // combo_V_DN {
        //     timeout-ms = <40>;
        //     key-positions = <LTC LMC>;
        //     bindings = <&kp C_VOL_DN>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_BASE _SYM>;
        // };

        // combo_MUTE {
        //     timeout-ms = <50>;
        //     key-positions = <LBP RBP>;
        //     bindings = <&kp C_MUTE>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_NAV _SYM>;
        // };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LTI RTI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_BASE>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        // combo_J {
        //     timeout-ms = <50>;
        //     key-positions = <LMI LBI>;
        //     bindings = <&kp J>;
        //     layers = <_BASE>;
        // };

        // combo_W {
        //     timeout-ms = <50>;
        //     key-positions = <LTI LMI>;
        //     bindings = <&kp W>;
        //     layers = <_BASE>;
        // };

        // combo_G {
        //     timeout-ms = <50>;
        //     key-positions = <RMI RBI>;
        //     bindings = <&kp G>;
        //     layers = <_BASE>;
        // };

        // combo_F {
        //     timeout-ms = <50>;
        //     key-positions = <RTI RMI>;
        //     bindings = <&kp F>;
        //     layers = <_BASE>;
        // };

        combo_YOU {
            timeout-ms = <50>;
            key-positions = <RTI RTM RTR>;
            bindings = <&You>;
            layers = <_BASE>;
        };

// ------------------------- SYMBOL COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <45>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <45>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <45>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <45>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <45>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <45>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };

// ------------------------- UTILITY COMBOS --------------------------------
        // combo_PSCRN {
        //     timeout-ms = <40>;
        //     key-positions = <LBR LBI>;
        //     bindings = <&kp PSCRN>;
        //     layers = <_BASE _SYM _NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_COPY_M {
        //     timeout-ms = <40>;
        //     key-positions = <RTM RTR>;
        //     bindings = <&kp LG(C)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_COPY_W {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTR>;
        //     bindings = <&kp LC(C)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_M {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp LG(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LC(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        win_cp: win_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LC(C)>, <&kp LC(V)>;
        };

        mac_cp: mac_cp {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp LG(C)>, <&kp LG(V)>;
        };

        plus_mul: plus_multi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        };

        min_div: minus_divide {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <250>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  B  |  C  |  P  |  L  |  W  |    |  F  |  D  |  O  |  U  |  Y  |
// |  N  |  S  |  T  |  R  |  J  |    |  G  |  H  |  A  |  E  |  I  |
// | wCP |  Z  |  V  |  M  |  <  |    |  >  |  K  |  Q  |  X  | mCP |
//        | _NAV(=) | _SYM(BSPC) |    | _NAV(SPC) | _SYM(+) |
                        bindings = <
   &kp B        &kp C        &kp P       &kp L        &kp W           &kp F  &kp D        &kp O       &kp U        &kp Y
   &hml LALT N  &hml LCTRL S &hml LGUI T &hsl LSHFT R &kp J           &kp G  &hsr LSHFT H &hmr LGUI A &hmr LCTRL E &hmr LALT I 
   &win_cp      &kp Z        &kp V       &kp M        &kp LT          &kp GT &kp K        &kp Q       &kp X        &mac_cp
                                     &bst _NAV EQUAL  &bst _SYM BSPC  &spt _NAV SPACE  &spt _SYM PLUS
                        >;
                };

                nav_layer {
// ----------------------------------    -------------------------------
// | ESC | HOME |  UP  | END  | PUP |    | PRN |  7  |  8  |  9  |  0  |
// | TAB | LEFT |  SPC | RGHT | PDN |    | . , |  4  |  5  |  6  | RET |
// |  v. | INS  | DOWN | DEL  |  v- |    |  v+ |  1  |  2  |  3  | APP |
//               | LSFT(RET) | BSPC |    | + * | - / |
                        bindings = <
   &kp ESC       &kp HOME        &kp UP          &kp END          &kp PG_UP       &kp PSCRN    &kp N7        &kp N8       &kp N9        &kp N0
   &hml LALT TAB &hml LCTRL LEFT &hml LGUI SPACE &hsl LSHFT RIGHT &kp PG_DN       &kp KP_DOT   &hsr LSHFT N4 &hmr LGUI N5 &hmr LCTRL N6 &hmr LALT RET
   &kp C_MUTE    &kp INS         &kp DOWN        &kp DEL          &kp C_VOL_DN    &kp C_VOL_UP &kp N1        &kp N2       &kp N3        &kp K_APP
                                                 &hSR LSHFT RET   &bst _SYM BSPC  &plus_mul    &min_div
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  \  |  |  |  _  |  =  |  {  |    |  }  |  "  |  ;  |  :  |  !  |
// |  /  |  *  |  -  |  +  |  (  |    |  )  |  '  |  ,  |  .  |  ?  |
// |  `  |  &  |  ^  |  %  |  [  |    |  ]  |  @  |  #  |  $  |  ~  |
//                  |     | BSPC |    | SPC | BSPC |
                        bindings = <
   &kp BSLH        &kp PIPE        &kp UNDER       &kp EQUAL       &kp LBRC      &kp RBRC &kp DQT        &kp SEMI        &kp COLON      &kp EXCL
   &hml LALT SLASH &hml LCTRL STAR &hml LGUI MINUS &hsl LSHFT PLUS &kp LPAR      &kp RPAR &hsr LSHFT SQT &hmr LGUI COMMA &hmr LCTRL DOT &hmr LALT QMARK
   &kp GRAVE       &kp AMPS        &kp CARET       &kp PRCNT       &kp LBKT      &kp RBKT &kp AT         &kp HASH        &kp DLLR       &kp TILDE
                                                          &none    &kp BSPC      &spt _NAV SPACE  &kp BSPC
                        >;
                };

                btf_layer {
// -------------------------------    ----------------------------
// | BT1 | BT2 | BT3 | BT4 | BT5 |    | F11 | F7 | F8 | F9 | F10 |    
// | ALT | CTL | GUI | SFT | USB |    | F12 | F4 | F5 | F6 | APP |
// |     |  v- |  v. |  v+ |     |    |     | F1 | F2 | F3 |     |
//                   |     |     |    |     |     |
                        bindings = <
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp F11 &kp F7 &kp F8 &kp F9 &kp F10       
   &kp LALT     &kp LCTRL    &kp LGUI     &kp LSHFT    &out OUT_TOG   &kp F12 &kp F4 &kp F5 &kp F6 &kp K_APP     
   &none        &kp C_VOL_DN &kp C_MUTE   &kp C_VOL_UP &none          &none   &kp F1 &kp F2 &kp F3 &none         
                                                &none   &none         &none    &none
                        >;
                };                
    };
};
