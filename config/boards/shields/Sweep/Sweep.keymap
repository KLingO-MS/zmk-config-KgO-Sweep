/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3


/ {
// ------------------------- MACROS --------------------------------
    macros {
        // to_BASE: to_BASE {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_OFF>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_SYM: mo_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        // to_SYM: to_SYM {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_SYM>
        //         , <&to _SYM>
        //         ;
        // };

        // to_NAV: to_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&rgb_ug RGB_ON>
        //         , <&rgb_ug RGB_NAV>
        //         , <&tog _NAV>
        //         ;
        // };

        // mo_NAV: mo_NAV {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        // mo_BTF: mo_BTF {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_ON>
        //         , <&macro_tap &rgb_ug RGB_BTF>
        //         , <&macro_press &mo _BTF>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_OFF>
        //         , <&macro_release &mo _BTF>
        //         ;
        // };

        // to_BOOT: to_BOOT {
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     bindings
        //         = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
        //         , <&rgb_ug RGB_ON>
        //         , <&bootloader>
        //         ;
        // };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&bootloader>;
        };


// ------------------------- VOLUME COMBOS --------------------------------
        // combo_V_UP {
        //     timeout-ms = <40>;
        //     key-positions = <RTC RMC>;
        //     bindings = <&kp C_VOL_UP>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_BASE _SYM>;
        // };

        // combo_V_DN {
        //     timeout-ms = <40>;
        //     key-positions = <LTC LMC>;
        //     bindings = <&kp C_VOL_DN>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_BASE _SYM>;
        // };

        // combo_MUTE {
        //     timeout-ms = <50>;
        //     key-positions = <LBP RBP>;
        //     bindings = <&kp C_MUTE>;
        //     require-prior-idle-ms = <200>;
        //     // layers = <_NAV _SYM>;
        // };

// ------------------------- MODS COMBOS --------------------------------
        // combo_CAPS {
        //     timeout-ms = <50>;
        //     key-positions = <LTI RTI>;
        //     bindings = <&caps_word>;
        //     require-prior-idle-ms = <200>;
        //     layers = <_BASE>;
        // };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        // combo_J {
        //     timeout-ms = <40>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp J>;
        //     layers = <_BASE>;
        // };

        // combo_W {
        //     timeout-ms = <40>;
        //     key-positions = <LMM LMI>;
        //     bindings = <&kp W>;
        //     layers = <_BASE>;
        // };

        // combo_G {
        //     timeout-ms = <40>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp G>;
        //     layers = <_BASE>;
        // };

        // combo_F {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMM>;
        //     bindings = <&kp F>;
        //     layers = <_BASE>;
        // };

        // combo_LPAR {
        //     timeout-ms = <40>;
        //     key-positions = <LMM LMI>;
        //     bindings = <&kp LPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RPAR {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMM>;
        //     bindings = <&kp RPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBRC {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTI>;
        //     bindings = <&kp LBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBRC {
        //     timeout-ms = <40>;
        //     key-positions = <RTI RTM>;
        //     bindings = <&kp RBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBKT {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBI>;
        //     bindings = <&kp LBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBKT {
        //     timeout-ms = <40>;
        //     key-positions = <RBI RBM>;
        //     bindings = <&kp RBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_PSCRN {
        //     timeout-ms = <40>;
        //     key-positions = <LBR LBI>;
        //     bindings = <&kp PSCRN>;
        //     layers = <_BASE _SYM _NAV>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_COPY_M {
        //     timeout-ms = <40>;
        //     key-positions = <RTM RTR>;
        //     bindings = <&kp LG(C)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_COPY_W {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTR>;
        //     bindings = <&kp LC(C)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_M {
        //     timeout-ms = <40>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp LG(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_PASTA_W {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LC(V)>;
        //     layers = <_BASE>;
        //     require-prior-idle-ms = <200>;
        // };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        // win_cp: win_cp {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp LC(C)>, <&kp LC(V)>;
        // };

        // mac_cp: mac_cp {
        //     compatible = "zmk,behavior-tap-dance";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp LG(C)>, <&kp LG(V)>;
        // };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        // hml: hrm_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <170>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     // hold-trigger-on-release;             // delay positional check until key-release
        // };

        // /* right-hand HRMs */
        // hmr: hrm_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "tap-preferred";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <170>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     // hold-trigger-on-release;             // delay positional check until key-release
        // };

        // hsl: hrs_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;             // delay positional check until key-release
        // };

        // hsr: hrs_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <150>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;             // delay positional check until key-release
        // };

        // bst: backspace-tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <170>;
        //     //require-prior-idle-ms = <100>;
        //     bindings = <&mo>, <&kp>;
        // };

        // spt: space-tap {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <250>;
        //     quick-tap-ms = <200>;
        //     //require-prior-idle-ms = <100>;
        //     bindings = <&mo>, <&kp>;
        // };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
                        bindings = <
                        &kp A      &tog 1
                        >;
                };

                nav_layer {
                        bindings = <
                        &kp B      &tog 1
                        >;
                };
                
    };
};
