/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_34keys.h"

#define _BASE    0
#define _NAV     1
#define _SYM     2
#define _BTF     3

#define RGB_BASE RGB_COLOR_HSB(0,100,3)
#define RGB_SYM RGB_COLOR_HSB(40,100,3)
#define RGB_NAV RGB_COLOR_HSB(130,100,3)
#define RGB_BTF RGB_COLOR_HSB(230,100,4)

&sk {
    quick-release;
};

&sl {
    release-after-ms = <300>;
};

/ {
// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_OFF>
                , <&tog _NAV>
                ;
        };

        // mo_SYM: mo_SYM {
        //     label = "ZM_mo_SYM";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        to_SYM: to_SYM {
            label = "ZM_to_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_SYM>
                , <&to _SYM>
                ;
        };

        to_NAV: to_NAV {
            label = "ZM_to_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_NAV>
                , <&tog _NAV>
                ;
        };

        // mo_NAV: mo_NAV {
        //     label = "ZM_mo_NAV";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_NAV>
        //         , <&macro_press &mo _NAV>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _NAV>
        //         ;
        // };

        mo_BTF: mo_BTF {
            label = "ZM_mo_BTF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_ON>
                , <&macro_tap &rgb_ug RGB_BTF>
                , <&macro_press &mo _BTF>
                , <&macro_pause_for_release>
                , <&macro_tap &rgb_ug RGB_OFF>
                , <&macro_release &mo _BTF>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        combo_RESET {
            timeout-ms = <50>;
            key-positions = <LBR RBR>;
            bindings = <&to_BOOT>;
            layers = <_BTF>;
        };

        combo_BTF {
            timeout-ms = <50>;
            key-positions = <LHI RHI>;
            bindings = <&mo_BTF>;
            layers = <_BASE _SYM _NAV>;
        };

        combo_NAVR {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_NAV>;
            layers = <_BASE _SYM>;
        };

        combo_NAVL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_NAV>;
            layers = <_BASE _SYM>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RMI RMM RMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LMI LMM LMR>;
            bindings = <&to_BASE>;
            layers = <_NAV>;
        };

// ------------------------- VOLUME COMBOS --------------------------------
        combo_V_UP {
            timeout-ms = <40>;
            key-positions = <RTC RMC>;
            bindings = <&kp C_VOL_UP>;
            // layers = <_BASE _SYM>;
        };

        combo_V_DN {
            timeout-ms = <40>;
            key-positions = <LTC LMC>;
            bindings = <&kp C_VOL_DN>;
            // layers = <_BASE _SYM>;
        };

        combo_MUTE {
            timeout-ms = <50>;
            key-positions = <LMC RMC>;
            bindings = <&kp C_MUTE>;
            // layers = <_BASE _SYM>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LMI RMI>;
            bindings = <&caps_word>;
            layers = <_BASE>;
        };

        combo_RALTL {
            timeout-ms = <40>;
            key-positions = <LMP LTP>;
            bindings = <&kp RALT>;
            //layers = <_BASE>;
        };

        combo_RALTR {
            timeout-ms = <40>;
            key-positions = <LMP RTP>;
            bindings = <&kp RALT>;
            //layers = <_BASE>;
        };

// ------------------------- CHARACTER COMBOS --------------------------------
        combo_LPAR {
            timeout-ms = <40>;
            key-positions = <LMM LMI>;
            bindings = <&kp LPAR>;
            layers = <_BASE _SYM>;
        };

        combo_RPAR {
            timeout-ms = <40>;
            key-positions = <RMI RMM>;
            bindings = <&kp RPAR>;
            layers = <_BASE _SYM>;
        };

        combo_LBRC {
            timeout-ms = <40>;
            key-positions = <LTM LTI>;
            bindings = <&kp LBRC>;
            layers = <_BASE _SYM>;
        };

        combo_RBRC {
            timeout-ms = <40>;
            key-positions = <RTI RTM>;
            bindings = <&kp RBRC>;
            layers = <_BASE _SYM>;
        };

        combo_LBKT {
            timeout-ms = <40>;
            key-positions = <LBM LBI>;
            bindings = <&kp LBKT>;
            layers = <_BASE _SYM>;
        };

        combo_RBKT {
            timeout-ms = <40>;
            key-positions = <RBI RBM>;
            bindings = <&kp RBKT>;
            layers = <_BASE _SYM>;
        };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        // win_cp: win_cp {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "CTRL_COPY_PASTA";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp LC(C)>, <&kp LC(V)>;
        // };

        // mac_cp: mac_cp {
        //     compatible = "zmk,behavior-tap-dance";
        //     label = "GUI_COPY_PASTA";
        //     #binding-cells = <0>;
        //     tapping-term-ms = <400>;
        //     bindings = <&kp LG(C)>, <&kp LG(V)>;
        // };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            global-quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            global-quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsl: hrs_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            global-quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        hsr: hrs_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_SHIFT";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            global-quick-tap-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC_TAP_SYM_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <170>;
            //global-quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC_TAP_NAV_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            //global-quick-tap-ms = <100>;
            bindings = <&mo>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        // com_sem: comma_semicolon {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "COMMA_SEMI";
        //     #binding-cells = <0>;
        //     bindings = <&kp COMMA>, <&kp SEMI>;
        //     mods = <(MOD_LSFT)>;
        // };

        // dot_col: dot_colon {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "DOT_COLON";
        //     #binding-cells = <0>;
        //     bindings = <&kp DOT>, <&kp COLON>;
        //     mods = <(MOD_LSFT)>;
        // };
        
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------------    -------------------------------
// |  Q  |  Z  |  C  |  P  |  B  |    |  K  |  L  |  U  |  Y  |  X  |
// |  A  |  R  |  S  |  T  |  G  |    |  M  |  N  |  E  |  I  |  O  |
// |     |  W  |  V  |  D  |     |    |     |  H  |  F  |  J  |     |
//            | SFT | _SYM(BSPC) |    | _NAV(SPC) | SFT |
                        bindings = <
   &kp Q       &kp Z        &kp C       &kp P        &kp B           &kp K  &kp L        &kp U       &kp Y        &kp X
   &hml LALT A &hml LCTRL R &hml LGUI S &hsl LSHFT T &kp G           &kp M  &hsr LSHFT N &hmr LGUI E &hmr LCTRL I &hmr LALT O 
   &none       &kp W        &kp V       &kp D        &none           &none  &kp H        &kp F       &kp J        &none
                                          &kp COMMA  &bst _SYM BSPC  &spt _NAV SPACE  &kp DOT
                        >;
                };

                nav_layer {
// --------------------------------    -----------------------------------
// | ESC |  7  |  8  |  9  |  0   |    | PGUP | HOME |  UP  | END  | INS |
// | TAB |  4  |  5  |  6  | PSCR |    | PGDN | LEFT | DOWN | RGHT | RET |
// |     |  1  |  2  |  3  |      |    |      | DEL  | SPC  | APP  |     |
//                  | LSFT | BSPC |    | SHFT |      |
                        bindings = <
   &kp ESC       &kp N7        &kp N8       &kp N9        &kp N0          &kp PG_UP &kp HOME        &kp UP         &kp END          &kp INS
   &hml LALT TAB &hml LCTRL N4 &hml LGUI N5 &hsl LSHFT N6 &kp PSCRN       &kp PG_DN &hsr LSHFT LEFT &hmr LGUI DOWN &hmr LCTRL RIGHT &hmr LALT RET
   &none         &kp N1        &kp N2       &kp N3        &none           &none     &kp DEL         &kp SPACE      &kp K_APP        &none
                                              &kp LSHFT   &bst _SYM BSPC  &kp LSHFT &none
                        >;
                };
                
                sym_layer {
// -------------------------------    -------------------------------
// |  <  |  |  |  +  |  *  |  %  |    |  ~  |  #  |  $  |  &  |  >  |
// |  ?  |  !  |  -  |  _  |  ^  |    |  `  |  .  |  ,  |  "  |  '  |
// |     |  \  |  =  |  /  |  V- |    |  V+ |  :  |  ;  |  @  |     |
//                  |     | BSPC |    | SPC | BSPC |
                        bindings = <
   &kp LT          &kp PIPE        &kp PLUS        &kp STAR         &kp PRCNT     &kp TILDE    &kp HASH       &kp DLLR        &kp AMPS       &kp GT
   &hml LALT QMARK &hml LCTRL EXCL &hml LGUI MINUS &hsl LSHFT UNDER &kp CARET     &kp GRAVE    &hsr LSHFT DOT &hmr LGUI COMMA &hmr LCTRL DQT &hmr LALT SQT
   &none           &kp BSLH        &kp EQUAL       &kp SLASH        &kp C_VOL_DN  &kp C_VOL_UP &kp COLON      &kp SEMI        &kp AT         &none
                                                           &none    &kp BSPC      &spt _NAV SPACE     &kp BSPC
                        >;
                };

                btf_layer {
// --------------------------------    ------------------------------------
// | F1 |  F2   | F3  | F4  | F5  |    |  BT1  | BT2  | BT3 |  BT4  | BT5 |
// | F6 |  F7   | F8  | F9  | F10 |    | BTCLR | SHFT | GUI | CTRL  | ALT |
// |    | RESET | F11 | F12 |     |    |       | USB  | RGB | RESET |     |
//                    |     |     |    |     |     |
                        bindings = <
   &kp F1 &kp F2     &kp F3  &kp F4  &kp F5        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2    &bt BT_SEL 3 &bt BT_SEL 4
   &kp F6 &kp F7     &kp F8  &kp F9  &kp F10       &bt BT_CLR   &kp LSHFT    &kp LGUI        &kp LCTRL    &kp LALT
   &none  &sys_reset &kp F11 &kp F12 &none         &none        &out OUT_TOG &rgb_ug RGB_OFF &sys_reset   &none
                             &none   &none         &none    &none
                        >;
                };                
    };
};
