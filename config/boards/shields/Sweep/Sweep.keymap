/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/outputs.h>
#include "keypos_16keys.h"

#define _A1     0
#define _A2     1
#define _NAV    2
#define _NUM    3
#define _S1     4
#define _S2     5
#define _FUN    6
#define _BT     7

#define RGB_BASE RGB_COLOR_HSB(0,100,3)
#define RGB_NAV RGB_COLOR_HSB(80,100,3)
#define RGB_NUM RGB_COLOR_HSB(180,100,3)
#define RGB_FUN RGB_COLOR_HSB(280,100,3)
#define RGB_BTF RGB_COLOR_HSB(230,100,4)

&sk {
    quick-release;
};

&sl {
    release-after-ms = <1500>;
};

/ {
// ------------------------- MACROS --------------------------------
    macros {
        to_BASE: to_BASE {
            label = "ZM_to_BASE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_OFF>
                , <&to _A1>
                ;
        };

        // mo_SYM: mo_SYM {
        //     label = "ZM_mo_SYM";
        //     compatible = "zmk,behavior-macro";
        //     #binding-cells = <0>;
        //     wait-ms = <0>;
        //     tap-ms = <0>;
        //     bindings
        //         = <&macro_tap &rgb_ug RGB_SYM>
        //         , <&macro_press &mo _SYM>
        //         , <&macro_pause_for_release>
        //         , <&macro_tap &rgb_ug RGB_BASE>
        //         , <&macro_release &mo _SYM>
        //         ;
        // };

        to_NUM: to_NUM {
            label = "ZM_to_SYM";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_NUM>
                , <&to _NUM>
                ;
        };

        to_NAV: to_NAV {
            label = "ZM_to_NAV";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_NAV>
                , <&to _NAV>
                ;
        };

        to_FUN: to_FUN {
            label = "ZM_mo_FUN";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_FUN>
                , <&to _FUN>
                ;
        };

        to_BTF: mo_BTF {
            label = "ZM_mo_BTF";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&rgb_ug RGB_ON>
                , <&rgb_ug RGB_BTF>
                , <&to _BT>
                ;
        };

        to_BOOT: to_BOOT {
            label = "ZM_to_BOOT";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_COLOR_HSB(0,100,50)>
                , <&rgb_ug RGB_ON>
                , <&bootloader>
                ;
        };
    };

    combos {
        compatible = "zmk,combos";
// ------------------------- LAYER COMBOS --------------------------------
        // combo_RESET {
        //     timeout-ms = <50>;
        //     key-positions = <LMC RMC>;
        //     bindings = <&to_BOOT>;
        //     layers = <_BTF>;
        // };

        combo_BTF {
            timeout-ms = <50>;
            key-positions = <LTR LTM LTI>;
            bindings = <&to_BTF>;
            layers = <_A1>;
        };

        combo_FUN {
            timeout-ms = <50>;
            key-positions = <RTR RTM RTI>;
            bindings = <&to_FUN>;
            layers = <_A1>;
        };

        combo_NAV {
            timeout-ms = <50>;
            key-positions = <RBI RBM RBR>;
            bindings = <&to_NAV>;
            layers = <_A1>;
        };

        combo_NUM {
            timeout-ms = <50>;
            key-positions = <LBI LBM LBR>;
            bindings = <&to_NUM>;
            layers = <_A1>;
        };

        combo_BASER {
            timeout-ms = <50>;
            key-positions = <RBI RBM RBR>;
            bindings = <&to_BASE>;
            layers = <_NAV _NUM _FUN _BT>;
        };

        combo_BASEL {
            timeout-ms = <50>;
            key-positions = <LBI LBM LBR>;
            bindings = <&to_BASE>;
            layers = <_NAV _NUM _FUN _BT>;
        };

// ------------------------- MISC COMBOS --------------------------------
        combo_MAC_COPY {
            timeout-ms = <40>;
            key-positions = <LTI LBI>;
            bindings = <&kp LG(C)>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _NAV>;
        };

        combo_MAC_PASTE {
            timeout-ms = <40>;
            key-positions = <RTI RBI>;
            bindings = <&kp LG(V)>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _NAV>;
        };

        combo_WIN_COPY {
            timeout-ms = <40>;
            key-positions = <LTM LBM>;
            bindings = <&kp LC(C)>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _NAV>;
        };

        combo_WIN_PASTE {
            timeout-ms = <40>;
            key-positions = <RTM RBM>;
            bindings = <&kp LC(V)>;
            require-prior-idle-ms = <200>;
            layers = <_A1 _NAV>;
        };

        combo_MUTE {
            timeout-ms = <50>;
            key-positions = <LBP RBP>;
            bindings = <&kp C_MUTE>;
            require-prior-idle-ms = <200>;
            layers = <_FUN>;
        };

// ------------------------- MODS COMBOS --------------------------------
        combo_CAPS {
            timeout-ms = <50>;
            key-positions = <LTI RTI>;
            bindings = <&caps_word>;
            require-prior-idle-ms = <200>;
            layers = <_A1>;
        };

        // combo_RALTL {
        //     timeout-ms = <40>;
        //     key-positions = <LMP LTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

        // combo_RALTR {
        //     timeout-ms = <40>;
        //     key-positions = <LMP RTP>;
        //     bindings = <&kp RALT>;
        //     require-prior-idle-ms = <200>;
        //     //layers = <_BASE>;
        // };

// ------------------------- CHARACTER COMBOS --------------------------------
        // combo_LPAR {
        //     timeout-ms = <40>;
        //     key-positions = <LMM LMI>;
        //     bindings = <&kp LPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RPAR {
        //     timeout-ms = <40>;
        //     key-positions = <RMI RMM>;
        //     bindings = <&kp RPAR>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBRC {
        //     timeout-ms = <40>;
        //     key-positions = <LTM LTI>;
        //     bindings = <&kp LBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBRC {
        //     timeout-ms = <40>;
        //     key-positions = <RTI RTM>;
        //     bindings = <&kp RBRC>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LBKT {
        //     timeout-ms = <40>;
        //     key-positions = <LBM LBI>;
        //     bindings = <&kp LBKT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_RBKT {
        //     timeout-ms = <40>;
        //     key-positions = <RBI RBM>;
        //     bindings = <&kp RBKT>;
        //     layers = <_BASE _SYM>;
        // };

        combo_PSCRN {
            timeout-ms = <40>;
            key-positions = <RBI RBM>;
            bindings = <&kp PSCRN>;
            layers = <_NAV>;
            require-prior-idle-ms = <200>;
        };

        combo_APP {
            timeout-ms = <40>;
            key-positions = <RBR RBM>;
            bindings = <&kp K_APP>;
            layers = <_NAV>;
            require-prior-idle-ms = <200>;
        };

        // combo_GT {
        //     timeout-ms = <45>;
        //     key-positions = <RBM RBR>;
        //     bindings = <&kp GT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_LT {
        //     timeout-ms = <45>;
        //     key-positions = <LBM LBR>;
        //     bindings = <&kp LT>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_FSLH {
        //     timeout-ms = <45>;
        //     key-positions = <RMM RMR>;
        //     bindings = <&kp FSLH>;
        //     layers = <_BASE _SYM>;
        // };

        // combo_BSLH {
        //     timeout-ms = <45>;
        //     key-positions = <LMR LMM>;
        //     bindings = <&kp BSLH>;
        //     layers = <_BASE _SYM>;
        // };
    };

    behaviors {
// ------------------------- TAP-DANCES --------------------------------
        plu_mul: plus_multiply {
            compatible = "zmk,behavior-tap-dance";
            label = "PLUS_ASTERISK";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_PLUS>, <&kp KP_MULTIPLY>;
        };

        min_div: minus_divide {
            compatible = "zmk,behavior-tap-dance";
            label = "MINUS_DIVIDE";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&kp KP_MINUS>, <&kp KP_DIVIDE>;
        };

// ------------------------- HOLD-TAPS --------------------------------
        /* left-hand HRMs */
        hml: hrm_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        /* right-hand HRMs */
        hmr: hrm_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;             // delay positional check until key-release
        };

        // hsl: hrs_left {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "LEFT_SHIFT";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <120>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_R THUMBS>;
        //     hold-trigger-on-release;             // delay positional check until key-release
        // };

        // hsr: hrs_right {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "RIGHT_SHIFT";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <300>;
        //     quick-tap-ms = <170>;                // repeat on tap-into-hold
        //     require-prior-idle-ms = <120>;
        //     bindings = <&kp>, <&kp>;
        //     hold-trigger-key-positions = <KEYS_L THUMBS>;
        //     hold-trigger-on-release;             // delay positional check until key-release
        // };

        hll: hrl_left {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_LAYER";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        hlr: hrl_right {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_LAYER";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <170>;                // repeat on tap-into-hold
            require-prior-idle-ms = <120>;
            bindings = <&mo>, <&kp>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            //hold-trigger-on-release;             // delay positional check until key-release
        };

        bst: backspace-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "BSPC_TAP_SYM_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&mo>, <&sl>;
        };

        spt: space-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPC_TAP_NAV_HOLD";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <220>;
            quick-tap-ms = <200>;
            //require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

// ------------------------- MOD-MORPHS --------------------------------
        vol_dn_up: volume_down_up {
            compatible = "zmk,behavior-mod-morph";
            label = "VOL_DN_UP";
            #binding-cells = <0>;
            bindings = <&kp C_VOL_DN>, <&kp C_VOL_UP>;
            mods = <(MOD_LSFT)>;
        };

        com_sem: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_SEMI";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT)>;
        };

        dot_col: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_COLON";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT)>;
        };
        
    };

    keymap {
        compatible = "zmk,keymap";

                base_layer {
// -------------------------    -------------------------
//       |  C  |  L  |  D  |    |  H  |  U  |  Y  |     
// |  A  |  S  |  R  |  T  |    |  N  |  E  |  I  |  O  |
//            | _A2(sl A2) |    | LSFT(SPC) |
                        bindings = <
               &kp C       &hll _S2 L   &hll _S1 D      &hlr _S1 H  &hlr _S2 U   &kp Y
   &hll _NAV A &hml LALT S &hml LCTRL R &hml LGUI T     &hmr LGUI N &hmr LCTRL E &hmr LALT I &hlr _NUM O 
                                        &sl _A2         &spt LSHFT SPACE
                        >;
                };

                alpha2_layer {
// -------------------------    -------------------------
//       |  '  |  G  |  B  |    |  P  |  W  |  "  |
// |  Q  |  Z  |  V  |  M  |    |  K  |  F  |  J  |  X  |
//                   |     |    | LSFT(SPC) |
                        bindings = <
         &kp SQT     &kp G        &kp B           &kp P       &kp W        &kp DQT
   &kp Q &hml LALT Z &hml LCTRL V &hml LGUI M     &hmr LGUI K &hmr LCTRL F &hmr LALT J &kp X 
                                  &none           &spt LSHFT SPACE
                        >;
                };

                nav_layer {
// ---------------------------    ----------------------------
//       | PGUP | PGDN | ESC |    | BSPC | UP   | DEL  |
// | ` ~ | HOME | END  | TAB |    | LEFT | DOWN | RGHT | RET |
//               | LSFT(INS) |    | LSFT(SPC) |
                        bindings = <
             &kp PG_UP      &kp PG_DN      &kp ESC           &kp BSPC       &kp UP          &kp DEL
   &kp GRAVE &hml LALT HOME &hml LCTRL END &hml LGUI TAB     &hmr LGUI LEFT &hmr LCTRL DOWN &hmr LALT RIGHT &kp ENTER
                                           &spt LSHFT INS   &spt LSHFT SPC
                        >;
                };
                
                num_layer {
// -------------------------    -------------------------
//       |  4  |  5  |  6  |    |  0  | + * | - / |
// | , . |  1  |  2  |  3  |    |  7  |  8  |  9  | RET |
//            | LSFT(BSPC) |    | LSFT(SPC) |
                        bindings = <
              &kp N4       &kp N5        &kp N6             &kp N0       &plu_mul      &min_div
   &kp KP_DOT &hml LALT N1 &hml LCTRL N2 &hml LGUI N3       &hmr LGUI N7 &hmr LCTRL N8 &hmr LALT N9 &kp ENTER
                                         &spt LSHFT BSPC    &spt LSHFT SPC
                        >;
                };
                
                sym1_layer {
// -------------------------    -------------------------
//       |  *  |  =  |  +  |    |  !  |  ;  |  :  |
// |  \  |  |  |  _  |  -  |    |  ?  |  ,  |  .  |  /  |
//                  | BSPC |    | SPC |
                        bindings = <
            &kp ASTRK      &kp EQUAL        &kp PLUS            &kp EXCL        &kp SEMI         &kp COLON
   &kp BSLH &hml LALT PIPE &hml LCTRL UNDER &hml LGUI MINUS     &hmr LGUI QMARK &hmr LCTRL COMMA &hmr LALT DOT &kp SLASH
                                            &kp BSPC            &kp SPC
                        >;
                };

                sym2_layer {
// -------------------------    -------------------------
//       |  @  |  #  |  $  |    |  %  |  ^  |  &  |
// |  <  |  {  |  [  |  (  |    |  )  |  ]  |  }  |  >  |
//                  | BSPC |    | SPC |
                        bindings = <
          &kp AT         &kp HASH        &kp DLLR         &kp PRCNT      &kp CARET       &kp AMPS
   &kp LT &hml LALT LBRC &hml LCTRL LBKT &hml LGUI LPAR   &hmr LGUI RPAR &hmr LCTRL RBKT &hmr LALT RBRC &kp GT
                                         &kp BSPC         &kp SPC
                        >;
                };

                fun_layer {
// ---------------------    ------------------------
//      | F4 | F5 | F6 |    | F10 | F11 | F12 |
// |    | F1 | F2 | F3 |    | F7  | F8  | F9  | V± |
//                |    |    | SFT(MUTE) |
                        bindings = <
         &kp F4       &kp F5        &kp F6           &kp F10      &kp F11       &kp F12
   &none &hml LALT F1 &hml LCTRL F2 &hml LGUI F3     &hmr LGUI F7 &hmr LCTRL F8 &hmr LALT F9 &vol_dn_up
                                           &none     &spt LSHFT C_MUTE
                        >;
                };                

                bt_layer {
// -------------------------    ------------------------
//       | BT4 | BT5 | USB |    | BOOT |    |    |
// | RST | BT1 | BT2 | BT3 |    | CLR  |    |    | RST |
//                   |     |    |     |
                        bindings = <
              &bt BT_SEL 3 &bt BT_SEL 4 &out OUT_TOG     &to_BOOT   &none &none
   &sys_reset &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2     &bt BT_CLR &none &none &sys_reset
                                              &none      &none
                        >;
                };                
    };
};
